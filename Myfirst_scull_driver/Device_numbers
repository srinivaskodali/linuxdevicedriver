Char devices are accessed by device files in the filesystem.
Device files are available /dev/.

Ex:
	ls -l /dev/
	crw-------  1 root     root     <10,  60> May 31 11:22 network_latency
	crw-------  1 root     root     10,  59 May 31 11:22 network_throughput
	crw-rw-rw-  1 root     root      1,   3 May 31 11:22 null
	crw-r-----  1 root     kmem     10, 144 May 31 11:22 nvram
	crw-r-----  1 root     kmem      1,   4 May 31 11:22 port
	crw-rw-rw-  1 root     tty       5,   2 May 31 11:53 ptmx

In the above example, The comma(,) seperated numbers are Major & Minor numbers.
The first character 'c' defines it is a character driver.

Major number identifies the driver associated with the device.
In the above example, device 'null' & 'port' managed by a driver '1'.

Minor number identifies the exact device.


dev_t representation:
Major and minor number is defined dev_t datatype with int kernel.
dev_t is a 32 bit unsigned interger(linux-5.3.0 reference).
first 12 bits represents Major number & follwing 20 bits represents minor number of a device.

dev_t defined in <linux/types.h>

Major & Minor numbers can be obtained from a dev_t variable  by using
	MAJOR(dev_t dev) & Minor(dev_t dev) macros wich are available in <linux/kdev_t.h>

	MKDEV(int major, int minor) macro retuen a dev_t variable by combining provided both major and minor numbers.

It is adiviced to use above macros to create dev_t variable or to extract major and minor numbers from dev_t variable.

Allocating device number to a driver:
Every char driver must register to the kernel with device number.
A driver can use static device number, if it wants to use same device number whenever it loads n any platform.
	int register_chrdev_region(dev_t first, unsigned int count, char *name)
	first - is the device number(major & minor). it can be obtained with mknod macro as explained above.
	count - range of the minor numbers from the value available in first. A driver can have multiple minor numbers but only one major number.
	name - name of th device, which shall be available in  /prco/devices /sys...

	this function returns 0 if success and -ve if fails.
	There are high chances for failures if the major number is already occupied by another driver.
So,
Kernel provides dynamic registration also.
	int alloc_chrdev_region(dev_t *dev, unsigned int first_minor, unsigned int count, char *name)
	dev - device number which will be updated by kernel.
	first_minor - user can choose the first minor number, 
	count & name are similar to above.
	This API is etention of above register_chardev_region(), allocate an available device number + register it with kernel.

Freeing device number:
	void unregister_chrdev_region(dev_t first, unsigned int count)
	first - device number, either staticor dynamic
	count - range
The above APIs are defined in linux/fs.h
